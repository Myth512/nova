%{
#include <string.h>
#include "vm.h"
#include "value.h"

Value PyFloat_Equal(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Equal(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_NotEqual(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_NotEqual(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Greater(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Greater(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_GreaterEqual(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_GreaterEqual(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Less(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Less(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_LessEqual(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_LessEqual(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Add(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Add(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Subtract(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Subtract(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Multiply(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Multiply(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_TrueDivide(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_TrueDivide(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_FloorDivide(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_FloorDivide(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Modulo(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Modulo(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Power(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Power(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Positive(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Positive(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

Value PyFloat_Negative(int argc, Value *argv) {
    if (argc != 1)
        reportArityError(1, 1, argc);
    Value res = Float_Negative(argv[0], argv[1]);
    if (IS_NOT_IMPLEMENTED(res))
        operationNotImplemented(name, argv[0], argv[1]);
    return res;
}

%}

struct GperfMethod

%readonly-tables
%struct-type
%define lookup-function-name in_float_set

%%
__eq__, PyFloat_Equal
__ne__, PyFloat_NotEqual
__gt__, PyFloat_Greater
__ge__, PyFloat_GreaterEqual
__lt__, PyFloat_Less
__le__, PyFloat_LessEqual
__add__, PyFloat_Add
__sub__, PyFloat_Subtract
__mul__, PyFloat_Multiply
__truediv__, PyFloat_TrueDivide
__floordiv__, PyFloat_FloorDivide
__mod__, PyFloat_Modulo
__pow__, PyFloat_Power
__pos__, PyFloat_Positive
__neg__, PyFloat_Negative
%%
