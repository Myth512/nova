for x := 0; x < 10; x++ {
	print(x)
}


/*
if check(TOKEN_IDENTIFIER) {
	if checkNext(TOKEN_COLON_EQUAL) {
		parse as variable declaration
	} elif check(TOKEN_EQUAL) {
		parse as variable assignment
	} else {
		parse as expression
		if match(TOKEN_SEMICOLON) {
			// this is init part
			pop value
		} else {
			// this is condition
			// do nothing
		}

init - declararation

condition - expression

post - statement

init
'start':
condition
jump to 'end' if false
body
post
jump to 'start'
'end'



// all parts present

init
'condition'
condition
jump to 'end' if false
jump to 'body'
'post'
post
jump to 'condition'
'body'
body
jump to 'post'
'end'

// no init

'condition'
condition
jump to 'end' if false
jump to 'body'
'post'
post
jump to 'condition'
'body'
body
jump to 'post'
'end'

// no condition

init
jump to 'body'
'post'
post
'body'
body
jump to 'post'

// no post

init
'condition'
condition
jump to 'end' if false
'body'
body
jump to 'condition'
'end'

// no init and condition

jump to 'body'
'post'
post
'body'
body
jump to 'post'

// no init and post

'condition'
condition
jump to 'end' if false
'body'
body
jump to 'condition'
'end'

// no condition and post

init
'body'
body'
jump to 'body'
