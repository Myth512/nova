#ifndef TOKEN_H
#define TOKEN_H

typedef enum {
    // Delimiters
    TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
    TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
    TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
    TOKEN_DOT, TOKEN_COMMA, TOKEN_COLON, 

    // Arithmetic operators
    TOKEN_PLUS, TOKEN_MINUS,
    TOKEN_STAR, TOKEN_DOUBLE_STAR,
    TOKEN_SLASH, TOKEN_DOUBLE_SLASH,
    TOKEN_PERCENT, TOKEN_AT,

    // Bitwise operators
    TOKEN_AMPERSAND, TOKEN_PIPE, TOKEN_CARET,
    TOKEN_TILDE, TOKEN_LEFT_SHIFT, TOKEN_RIGHT_SHIFT,

    // Assignment operators
    TOKEN_COLON_EQUAL, TOKEN_EQUAL,
    TOKEN_PLUS_EQUAL, TOKEN_MINUS_EQUAL,
    TOKEN_STAR_EQUAL, TOKEN_DOUBLE_STAR_EQUAL,
    TOKEN_SLASH_EQUAL, TOKEN_DOUBLE_SLASH_EQUAL,
    TOKEN_PERCENT_EQUAL, TOKEN_AT_EQUAL,
    TOKEN_AMPERSAND_EQUAL, TOKEN_PIPE_EQUAL,
    TOKEN_CARET_EQUAL,
    TOKEN_LEFT_SHIFT_EQUAL, TOKEN_RIGHT_SHIFT_EQUAL,

    // Comparison operators
    TOKEN_DOUBLE_EQUAL, TOKEN_BANG_EQUAL, 
    TOKEN_LESS, TOKEN_LESS_EQUAL,
    TOKEN_GREATER, TOKEN_GREATER_EQUAL,

    // Misc operators
    TOKEN_IN, TOKEN_IS, TOKEN_AS,
    TOKEN_AND, TOKEN_OR, TOKEN_NOT,

    // Literals
    TOKEN_NONE, TOKEN_FALSE, TOKEN_TRUE, TOKEN_NUMBER, TOKEN_IDENTIFIER,
    TOKEN_STRING, TOKEN_RSTRING, TOKEN_FSTRING, TOKEN_USTRING,

    // Keywords
    TOKEN_ASSERT, TOKEN_ASYNC, TOKEN_AWAIT, TOKEN_BREAK, TOKEN_CLASS,
    TOKEN_CONTINUE, TOKEN_DEF, TOKEN_DEL, TOKEN_ELIF, TOKEN_ELSE,
    TOKEN_EXCEPT, TOKEN_FINALLY, TOKEN_FOR, TOKEN_FROM, TOKEN_GLOBAL,
    TOKEN_IF, TOKEN_IMPORT, TOKEN_LAMBDA, TOKEN_NONLOCAL, TOKEN_PASS,
    TOKEN_RAISE, TOKEN_RETURN, TOKEN_TRY, TOKEN_WHILE, TOKEN_WITH, TOKEN_YIELD,

    TOKEN_ERROR, TOKEN_EOF, TOKEN_SEMICOLON,
    TOKEN_NEWLINE, TOKEN_INDENT, TOKEN_DEDENT,
    TOKEN_COUNT
} TokenType;

typedef struct {
    TokenType type;
    const char *start;
    int length;
    int line;
    int column;
} Token;

typedef struct {
    int size;
    int capacity;
    Token *tokens;
} TokenVec;

void TokenVecInit(TokenVec *vec);

void TokenVecPush(TokenVec *vec, Token token);

void TokenVecFree(TokenVec *vec);

#endif